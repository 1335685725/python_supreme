# 模式[start:end:step]
'''
    其中,第一个数字表示切片的开始位置, 默认为0
    第二个数字表示切片截止(但不包含)位置, 默认为列表长度
    第三个为步长,默认为1
    当start为0时可以省略, 当end为列表长度时可以省略
    当step为1 时可以省略
    当step为负整数时表示反向切片 这时的start应该比end值要大

'''

a_list = [3, 4, 5, 7, 9, 11, 13, 15, 17]
a_list[:]# 同a_list[::] # 返回包含原列表中所有元素的新列表
a_list[::-1] # 返回包含原列表中所有元素的逆序列表
print(a_list[::2]) # 隔一个取一个值, 取欧数值
print(a_list[1::2])# 取奇数值
print(a_list[3:6]) # 指定切片的起始位置和结束位置
a_list[0:100] # 索引越界 返回空列表
a_list[100:] # 开始位置大于列表长度, 返回空列表

a_list[len(a_list):] = [9] # 在列表尾部增加元素
# print(a_list)
a_list[:0] = [1, 2] # 在列表头部增加元素
a_list[3:3] = [4] # 在列表中间插入值
a_list[:3] = [1, 2] # 替换列表元素, 等号两边的长度一致
a_list[3:] = [4, 5, 6] # 等号两边的长度可以不一样
a_list[::2] = [0 * 3] # 隔一个就修改一个
print(a_list)
a_list[::2] = ["a", "b", "c"] # 隔一个修改一个
a_list[::2] = [1, 2] # 左侧列表不连续的时候, 等号两边长度需要一样
a_list[:3] = [] # 删除列表中前三个元素
del a_list[:3] # 切片元素连续
del a_list[::2] # 切片元素不连续

